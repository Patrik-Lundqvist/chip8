{"version":3,"sources":["../js/roms.js","../js/keypad.js","../js/display.js","../js/ui.js","../js/index.js"],"names":["roms","name","file","UFO","keyMappings","emuKey","keyCode","description","PONG2","BRIX","TETRIS","fetchRom","rom","fetch","then","res","ok","Error","body","getReader","read","result","setupKeypad","getCurrentKeyMappings","onKeyDown","onKeyRelease","window","addEventListener","e","keyMapping","getKeyMapping","find","mapping","createDisplay","multiplier","canvas","document","querySelector","canvasContext","getContext","width","height","drawPixels","pixels","row","startOfRow","rowNumbers","slice","column","fillStyle","fillRect","clearRect","createUI","onHalt","onStep","onNextGame","onPrevGame","controlsDiv","debugDiv","debugInfoDiv","haltBtn","stepBtn","debugBtn","nextGameBtn","prevGameBtn","activeGameLabel","debugInfoEntries","showDebug","addInfoBoxEntry","parentDiv","entryText","controlEntry","createElement","classList","add","innerText","append","toggleDebug","hidden","pc","i","setupDebugInfoEntries","setGameLabel","updateDebugInfo","v","forEach","value","index","updateControls","firstChild","remove","display","ui","currentRomIndex","isStopped","isLoading","updateScreen","emu","get_contents","get_program_counter","get_i_register","get_v_register","executeCycle","execute_cycle","executeNextOpCode","execute_next_op_code","fps","Date","now","interval","update","requestAnimationFrame","delta","stop","start","step","getCurrentRom","selectNextGame","nextIndex","selectRomIndex","length","selectPrevGame","romIndex","reset","load_content","Chip8","key","press_key","release_key"],"mappings":"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","file":"js.10b5d78b.map","sourceRoot":"../static","sourcesContent":["import PONG2 from '../roms/PONG2.ch8';\nimport BRIX from '../roms/BRIX.ch8';\nimport TETRIS from '../roms/TETRIS.ch8';\nimport UFO from '../roms/UFO.ch8';\n\nexport const roms = [\n  {\n    name: 'Ufo',\n    file: UFO,\n    keyMappings: [\n      {emuKey: 0x4, keyCode: 81, description: 'Q - Shoot left'},\n      {emuKey: 0x5, keyCode: 87, description: 'W - Shoot up'},\n      {emuKey: 0x6, keyCode: 69, description: 'E - Shoot right'},\n    ]\n  },\n  {\n    name: 'Pong',\n    file: PONG2,\n    keyMappings: [\n      {emuKey: 0x1, keyCode: 65, description: 'A - Left paddle up'},\n      {emuKey: 0x4, keyCode: 90, description: 'Z - Left paddle down'},\n      {emuKey: 0xc, keyCode: 75, description: 'K - Right paddle up'},\n      {emuKey: 0xd, keyCode: 77, description: 'M - Right paddle down'}\n    ]\n  },\n  {\n    name: 'Brix',\n    file: BRIX,\n    keyMappings: [\n      {emuKey: 0x4, keyCode: 37, description: 'Arrow Left - Move left'},\n      {emuKey: 0x6, keyCode: 39, description: 'Arrow Right - Move right'},\n    ]\n  },\n  {\n    name: 'Tetris',\n    file: TETRIS,\n    keyMappings: [\n      {emuKey: 0x5, keyCode: 37, description: 'Arrow Left - Move left'},\n      {emuKey: 0x6, keyCode: 39, description: 'Arrow Right - Move right'},\n      {emuKey: 0x7, keyCode: 40, description: 'Arrow Down - Drop'},\n      {emuKey: 0x4, keyCode: 32, description: 'Space - Rotate'},\n    ]\n  },\n];\n\nexport const fetchRom = rom => {\n  return fetch(rom.file).then(res => {\n    if (!res.ok) throw new Error(`Could not fetch rom`);\n\n    return res.body\n      .getReader()\n      .read()\n      .then(result => {\n        return result;\n      });\n  });\n};\n","export const setupKeypad = (getCurrentKeyMappings, onKeyDown, onKeyRelease) => {\n  window.addEventListener('keydown', (e) => {\n    const keyMapping = getKeyMapping(e.keyCode);\n    if (keyMapping) {\n      onKeyDown(keyMapping.emuKey)\n    }\n  });\n\n  window.addEventListener('keyup', (e) => {\n    const keyMapping = getKeyMapping(e.keyCode);\n    if (keyMapping) {\n      onKeyRelease(keyMapping.emuKey);\n    }\n  });\n  const getKeyMapping = (keyCode) => {\n    return getCurrentKeyMappings().find(mapping => mapping.keyCode === keyCode);\n  }\n}\n\n\n\n","export const createDisplay = () => {\n  const multiplier = 8;\n  const canvas = document.querySelector(\"canvas\");\n  const canvasContext = canvas.getContext(\"2d\");\n\n\n  const setupDisplay = () => {\n    canvas.width = 64 * multiplier;\n    canvas.height = 32 * multiplier;\n  }\n\n  const drawPixels = (pixels) => {\n    for (let row = 0; row < 32; row++) {\n      const startOfRow = row * 64;\n      const rowNumbers = pixels.slice(startOfRow, startOfRow + 64);\n\n      for (let column = 0; column < 64; column++) {\n        const pixel = rowNumbers[column];\n        if (pixel) {\n          canvasContext.fillStyle = \"#26cdff\";\n          canvasContext.fillRect(column * multiplier, row * multiplier, multiplier, multiplier);\n        } else {\n          canvasContext.clearRect(column * multiplier, row * multiplier, multiplier, multiplier);\n        }\n      }\n    }\n  }\n\n  setupDisplay();\n\n  return {\n    drawPixels\n  }\n}\n","export const createUI = (onHalt, onStep, onNextGame, onPrevGame) => {\n  const controlsDiv = document.querySelector('.controls');\n  const debugDiv = document.querySelector('.debug-box');\n  const debugInfoDiv = document.querySelector('.debug');\n  const haltBtn = document.querySelector('.halt-button');\n  const stepBtn = document.querySelector('.step-button');\n  const debugBtn = document.querySelector('.debug-button');\n  const nextGameBtn = document.querySelector('.next-game');\n  const prevGameBtn = document.querySelector(\".prev-game\");\n  const activeGameLabel = document.querySelector(\".game-info-active\");\n\n  let debugInfoEntries = {};\n  let showDebug = false;\n\n  const setupEvents = () => {\n    haltBtn.addEventListener(\"click\", onHalt);\n    stepBtn.addEventListener(\"click\", onStep);\n    debugBtn.addEventListener(\"click\", toggleDebug);\n    nextGameBtn.addEventListener(\"click\", onNextGame);\n    prevGameBtn.addEventListener(\"click\", onPrevGame);\n  }\n\n  const setupDebugInfoEntries = () => {\n    debugInfoEntries = {\n      pc: addInfoBoxEntry(debugInfoDiv, 'PC'),\n      i: addInfoBoxEntry(debugInfoDiv, 'I'),\n    }\n    for (let i = 0; i <= 15; i++) {\n      debugInfoEntries[`v${i}`] = addInfoBoxEntry(debugInfoDiv, `V${i}`);\n    }\n  }\n\n  const addInfoBoxEntry = (parentDiv, entryText) => {\n    const controlEntry = document.createElement('div');\n    controlEntry.classList.add('info-box-entry');\n    controlEntry.innerText = entryText;\n    parentDiv.append(controlEntry);\n    return controlEntry;\n  }\n\n  const setupUI = () => {\n    setupEvents();\n    setupDebugInfoEntries();\n    debugDiv.hidden = !showDebug;\n  }\n\n  const setGameLabel = (name) => {\n    activeGameLabel.innerText = name;\n  }\n\n  const updateDebugInfo = (pc, i, v) => {\n    if (!showDebug) {\n      return;\n    }\n    debugInfoEntries.pc.innerText = `PC: ${pc}`;\n    debugInfoEntries.i.innerText = `I: ${i}`;\n    v.forEach((value, index) => {\n      debugInfoEntries[`v${index}`].innerText = `V${index}: ${value}`;\n    })\n  }\n\n  const updateControls = (keyMappings) => {\n    while (controlsDiv.firstChild) {\n      controlsDiv.firstChild.remove();\n    }\n    keyMappings.forEach((keyMapping) => addInfoBoxEntry(controlsDiv, keyMapping.description))\n  }\n\n  const toggleDebug = () => {\n    showDebug = !showDebug;\n    debugDiv.hidden = !showDebug;\n  };\n\n  setupUI();\n\n  return {\n    setGameLabel,\n    updateDebugInfo,\n    updateControls\n  }\n};\n","import {Chip8} from '../rs/Cargo.toml';\nimport {roms, fetchRom} from './roms';\nimport {setupKeypad} from './keypad';\nimport {createDisplay} from './display';\nimport {createUI} from './ui';\n\nlet currentRomIndex = 0;\nlet isStopped = true;\nlet isLoading = false;\nlet display;\nlet ui;\n\nconst updateScreen = () => {\n  const pixels = emu.get_contents();\n\n  display.drawPixels(pixels);\n  ui.updateDebugInfo(\n    emu.get_program_counter(),\n    emu.get_i_register(),\n    emu.get_v_register()\n  );\n};\n\nconst executeCycle = () => {\n  emu.execute_cycle();\n  updateScreen();\n};\n\nconst executeNextOpCode = () => {\n  emu.execute_next_op_code();\n  updateScreen();\n};\n\nconst fps = 60;\nvar then = Date.now();\nvar interval = 1000/fps;\nconst update = () => {\n  window.requestAnimationFrame(update);\n\n  const now = Date.now();\n  const delta = now - then;\n\n  if (delta > interval) {\n      then = now - (delta % interval);\n\n      if (!isStopped) {\n        executeCycle();\n      }\n  }\n\n};\n\nconst stop = () => {\n  isStopped = true;\n};\nconst start = () => {\n  isStopped = false;\n};\n\nconst step = () => {\n  executeNextOpCode();\n};\n\nconst getCurrentRom = () => {\n  return roms[currentRomIndex];\n};\n\nconst selectNextGame = () => {\n  const nextIndex = currentRomIndex + 1;\n  selectRomIndex(nextIndex > roms.length - 1 ? 0 : nextIndex);\n};\n\nconst selectPrevGame = () => {\n  const nextIndex = currentRomIndex - 1;\n  selectRomIndex(nextIndex < 0 ? roms.length - 1 : nextIndex);\n};\n\nconst selectRomIndex = romIndex => {\n  if (isLoading) {\n    return;\n  }\n  isLoading = true;\n  emu.reset();\n  currentRomIndex = romIndex;\n  const rom = roms[romIndex];\n  ui.setGameLabel(rom.name);\n  fetchRom(rom).then(res => {\n    emu.load_content(res.value);\n    start();\n    ui.updateControls(rom.keyMappings);\n    isLoading = false;\n  });\n};\n\nconst emu = new Chip8();\ndisplay = createDisplay();\nui = createUI(stop, step, selectNextGame, selectPrevGame);\nsetupKeypad(\n  () => getCurrentRom().keyMappings,\n  key => emu.press_key(key),\n  key => emu.release_key(key)\n);\nselectRomIndex(0);\nwindow.requestAnimationFrame(update);\n"]}